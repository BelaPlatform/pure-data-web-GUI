#N canvas 521 181 671 680 12;
#X floatatom 180 285 0 0 0 0 - - -;
#X obj 96 316 f;
#X obj 132 315 + 1;
#X msg 114 241 1;
#X msg 310 289 0;
#X obj 431 501 *;
#X obj 399 410 t f f;
#X obj 431 471 -;
#X msg 449 417 0;
#X obj 470 471 r delay-multiplier;
#X obj 442 532 r reset-stop;
#X obj 242 118 inlet;
#X obj 180 262 getsize \$1 \$2;
#X obj 292 319 element \$1 \$2;
#X obj 188 312 element \$1 \$2;
#X obj 188 590 outlet;
#X obj 391 590 outlet;
#X obj 188 352 get \$3 y w x;
#X obj 292 352 get \$3 y w;
#X obj 284 590 outlet;
#X obj 359 440 t f b;
#X obj 391 479 0;
#X text 289 117 pointer in;
#X text 87 30 This is an abstraction used in the sequencer example.
Here we take a pointer and sequence an array belonging to it \, either
the amplitude or the frequency \, depending on the value of argument
2 The template of the scalar is given by argument 1 and that of the
array elements by argument 3, f 68;
#X text 107 618 Outlets: new y value \, new w value \, time to ramp
to new values., f 62;
#X obj 96 369 select;
#X obj 242 158 trigger bang bang pointer bang;
#X obj 431 561 delay;
#X connect 0 0 25 1;
#X connect 1 0 2 0;
#X connect 1 0 25 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 13 0;
#X connect 5 0 16 0;
#X connect 5 0 27 0;
#X connect 6 0 7 1;
#X connect 6 1 7 0;
#X connect 7 0 5 0;
#X connect 8 0 7 1;
#X connect 9 0 5 1;
#X connect 10 0 27 0;
#X connect 11 0 26 0;
#X connect 12 0 0 0;
#X connect 13 0 18 0;
#X connect 14 0 17 0;
#X connect 17 0 15 0;
#X connect 17 1 19 0;
#X connect 17 2 6 0;
#X connect 18 0 15 0;
#X connect 18 1 20 0;
#X connect 20 0 19 0;
#X connect 20 1 21 0;
#X connect 21 0 16 0;
#X connect 25 1 14 0;
#X connect 26 0 1 0;
#X connect 26 1 4 0;
#X connect 26 2 13 1;
#X connect 26 2 12 0;
#X connect 26 2 14 1;
#X connect 26 3 3 0;
#X connect 26 3 8 0;
#X connect 27 0 1 0;
